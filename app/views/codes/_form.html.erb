<!--
 <%#= form_with(model: code, local: true) do |form| %>
   <%# if code.errors.any? %>
     <div id="error_explanation">
       <h2><%#= pluralize(code.errors.count, "error") %> prohibited this code from being saved:</h2>

       <ul>
       <%# code.errors.full_messages.each do |message| %>
         <li><%#= message %></li>
       <%# end %>
       </ul>
     </div>
   <%# end %>

   <div class="actions">
     <%#= form.submit %>
   </div>
 <%# end %>
 -->
<html>
    <head>
        <meta charset="UTF-8">
        <%#= javascript_include_tag('app.js') %>
        <title>簡易オンラインジャッジシステム</title>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.0/ace.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.0/ext-language_tools.js"></script>
    </head>
    <body>
        <h1>コードをDockerコンテナで実行!</h1>
        言語：
        <select id="language">
            <option value="ruby">Ruby</option>
            <option value="python">Python</option>
            <option value="c">C</option>
        </select>
        <br/>

        ソースコード：<br/>
        <div id="source_code" style="width: 70%; height: 200px; resize: vertical;"></div>

        標準入力：<br/>
        <textarea id="input" style="width: 100%; height: 50px; resize: vertical;"></textarea>
        <br/>

        <button id="run_button" class="btn btn-primary">実行（Ctrl-Enter）</button>
        <br/>
        <hr/>

        標準出力：
        <pre><div id="stdout" style="background: lightgray"></div></pre>

        標準エラー出力：
        <pre><div id="stderr" style="background: lightgray"></div></pre>

        実行時間：
        <div id="time" style="background: lightgray"></div>

        終了コード：
        <div id="exit_code" style="background: lightgray"></div>
    </body>
</html>



        <script>
        var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var child_process = require('child_process');
var fs = require('fs');

app.use(express.static('public'));
app.use(bodyParser.urlencoded({extended: false}));

app.post('/api/run', function(req, res){
    var language = req.body.language;
    var source_code = req.body.source_code;
    var input = req.body.input;

    var filename, execCmd;
    if(language === 'ruby'){
        filename = 'Main.rb';
        execCmd = 'ruby Main.rb';
    }else if(language === 'python'){
        filename = 'Main.py';
        execCmd = 'python Main.py';
    }else if(language === 'c'){
        filename = 'Main.c';
        execCmd = 'cc -Wall -o Main Main.c && ./Main';
    }

    // Create a container
    var dockerCmd = 
        'docker create -i ' + 
        '--net none ' + 
        '--cpuset-cpus 0 ' + 
        '--memory 512m --memory-swap 512m ' + 
        '--ulimit nproc=10:10 ' + 
        '--ulimit fsize=1000000 ' + 
        '-w /workspace ' + 
        'ubuntu-dev ' + 
        '/usr/bin/time -q -f "%e" -o /time.txt ' + 
        'timeout 3 ' + 
        'su nobody -s /bin/bash -c "' + 
        execCmd + 
        '"';

    console.log("Running: " + dockerCmd);
    var containerId = child_process.execSync(dockerCmd).toString().substr(0, 12);
    console.log("ContainerId: " + containerId);

    // Copy the source code to the container
    child_process.execSync('rm -rf /tmp/workspace && mkdir /tmp/workspace && chmod 777 /tmp/workspace');
    fs.writeFileSync('/tmp/workspace/' + filename, source_code);
    dockerCmd = "docker cp /tmp/workspace " + containerId + ":/";
    console.log("Running: " + dockerCmd);
    child_process.execSync(dockerCmd);
    //Start the container
    dockerCmd = "docker start -i " + containerId;
    console.log("Running: " + dockerCmd);
    var child = child_process.exec(dockerCmd, {}, function(error, stdout, stderr){
        //Copy time command result
        dockerCmd = "docker cp " + containerId + ":/time.txt /tmp/time.txt";
        console.log("Running: " + dockerCmd);
        child_process.execSync(dockerCmd);
        var time = fs.readFileSync("/tmp/time.txt").toString();

        //Remove the container
        dockerCmd = "docker rm " + containerId;
        console.log("Running: " + dockerCmd);
        child_process.execSync(dockerCmd);

        console.log("Result: ", error, stdout, stderr);
        res.send({
            stdout: stdout,
            stderr: stderr,
            exit_code: error && error.code || 0,
            time: time,
        });
    });
    child.stdin.write(input);
    child.stdin.end();
});

app.listen(3000, function(){
    console.log('Listening on port 3000');
});
            
</script>
        
<!--ui.js-->
<script>
            
var aceEditor = ace.edit("source_code");

// Set ACE editor options
aceEditor.$blockScrolling = Infinity;
aceEditor.setOptions({
    enableBasicAutocompletion: true,
    enableSnippets: true,
    enableLiveAutocompletion: true
});
aceEditor.setTheme("ace/theme/monokai");

// run the code when "run_button" is clicked, or Ctrl-Enter is PermissionRequestedEvent.
$("#run_button").on("click", function(event){
    runCode();
});
aceEditor.commands.addCommand({
    bindKey: {win: "Ctrl-Enter", mac: "Ctrl-Enter"},
    exec: function(){
      runCode();
    }
});
// Language settings
function setEditorLanguage(language){
    var languageToMode = {
        ruby: "ruby",
        python: "python",
        c: "c_cpp",
    };
    var mode = languageToMode[language];
    aceEditor.getSession().setMode("ace/mode/" + mode);

}
$("#language").val("ruby");
setEditorLanguage("ruby");
$("#language").on("change", function(event){
    setEditorLanguage(this.value);
});
</script>

<!--run.js-->
<script>
    // Submit and run the ConvolverNode.
function runCode(){
    $("#run_button").text("実行中...").prop("disabled", true);
    var language = $("#language").val();
    var source_code = aceEditor.getValue();
    var input = $("#input").val();
    $.ajax({
        url: "http://api.paiza.io/runners/create",
        method: "POST",
        data: {
            language: language,
            source_code: source_code,
            input: input,
            longpoll: false,
            api_key: 'guest'
        },
    }).done(function(result){
        var sessionId = result.id;
        var retryCount = 0;
        var getResult = function(){
            console.log("getResult");
            $.ajax({
                url: "http://api.paiza.io/runners/get_details?api_key=guest&id=" + sessionId,
                method: "GET",
            }).done(function(result){
                if(result.status == "running" && retryCount++ < 10){
                    setTimeout(getResult, 1000);
                    return;
                }
                console.log("result:", result);
                $("#stdout").text(result.stdout);
                $("#stderr").text(result, stderr);
                $("#time").text(result.time);
                $("#exit_code").text(result.exit_code);
                $("#run_button").text("実行（Ctrl-Enter）").prop("disabled", false);
            }).fail(function(error){
                alert("Request Failed:" + error);
                $("#run_button").text("実行（Ctrl-Enter）").prop("disabled", false);
            });
        };
        getResult();
    }).fail(function(error){
        alert("Request Failed:" + error);
        $("#run_button").text("実行（Ctrl-Enter）").prop("disabled", false);
    });
}
</script>